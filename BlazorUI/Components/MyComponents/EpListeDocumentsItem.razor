@inject IDocumentRepository repository
@inject IDialogService dialogService

<style>
	.corrupted {
		border-color: red;
		background-color: #ffebee;
	}
</style>

<MudContainer Class="@GetBorderColor()" MaxWidth="MaxWidth.Medium">
	<MudGrid Class="d-flex justify-space-between">
		<MudItem>
			<MudText Typo="Typo.subtitle2" Color="@GetCouleurStatut()">@GetEtatLabel()</MudText>
			<MudText Typo="Typo.body1">@GetNameLabel()</MudText>
			<MudText Typo="Typo.caption">@document.Nom</MudText>
		</MudItem>
		<MudItem Class="d-flex justify-end">
			<MudButton
				EndIcon="@Icons.Material.Filled.Delete"
				OnClick="DeleteDocument"/>
		</MudItem>
	</MudGrid>
</MudContainer>

@code {
	[Parameter] public Document document { get; set; }
	[Parameter] public EventCallback OnDelete { get; set; }

	private string GetEtatLabel() =>
		document.StatutCode == StatutDocument.EnCours.Code ? "En cours de vérification" :
		document.StatutCode == StatutDocument.Corrompu.Code ? "Document corrompu" :
		"Document validé";

	private string GetNameLabel() =>
		document.Description == string.Empty ? "Aucun nom entré par le déposant" : document.Description;

	private string GetBorderColor()
	{
		var res = "border-solid border-2 pa-2 mb-2 ";
		res += document.IsCorrupted ? "corrupted" : "mud-border-primary";
		return res;
	}

	private Color GetCouleurStatut() =>
		document.IsCorrupted ? Color.Error :
		document.IsValide ? Color.Success :
		Color.Warning;

	private async void DeleteDocument()
	{
		var result = await dialogService.ShowMessageBox(
			"Warning",
			"Deleting can not be undone!",
			yesText: "Delete!", cancelText: "Cancel");

		if (!(result ?? false)) return;

		await repository.Delete(document.Id);
		await OnDelete.InvokeAsync();
	}

}