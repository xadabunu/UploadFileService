@using Microsoft.AspNetCore.SignalR.Client
@using BlazorUI.Application.Model
@inject ILogger<EpFormFile> Logger;
@inject IDocumentRepository DocumentRepository;

<MudPaper Elevation="0" Class="@GetColorClass()">

	<MudStack Spacing="6" Class="pa-xs-2 pa-sm-6 my-6">

		<MudFileUpload T="IBrowserFile" FilesChanged="FileChanged">
			<ButtonTemplate>
				<MudStack Row="true" AlignItems="AlignItems.Center">
					<MudButton
						HtmlTag="label"
						Variant="Variant.Filled"
						Color="Color.Primary"
						for="@context.Id">
						Choisir un fichier
					</MudButton>

					<MudInputLabel> @GetFileLabel() </MudInputLabel>
				</MudStack>
			</ButtonTemplate>
		</MudFileUpload>

		<MudTextField
			T="string"
			@bind-Value="_titreDocument"
			Label="Titre du document"
			Variant="Variant.Filled"/>

		<MudButton
			Variant="Variant.Filled"
			OnClick="UploadDocument"
			Size="Size.Large"
			Color="Color.Tertiary"
			Disabled="@NoFileSelected()"
			Class="align-self-center">
			Ajouter le document
		</MudButton>

		<EpListeDocuments
			TypeDocument="TypeDocument"
			Documents="Documents"/>

	</MudStack>

</MudPaper>


@code
{
	public List<Document> Documents = [];
	private IBrowserFile? _currentFile;
	private string _titreDocument = string.Empty;

	[Parameter] public TypeDocument TypeDocument { get; init; } = default!;

	[CascadingParameter] public DocumentsPageState State { get; set; }

	private int DemandeId { get; set; }
	private HubConnection? HubConnection { get; set; }

	protected override async Task OnInitializedAsync()
	{
		DemandeId = State.DemandeId;
		HubConnection = State.HubConnection;

		Documents = (await DocumentRepository.GetDocumentsByType(DemandeId, TypeDocument.Code)).ToList();
	}

	private void FileChanged(IBrowserFile? file)
	{
		if (file == null) return;

		_currentFile = file;
	}

	private async Task UploadDocument()
	{
		if (_currentFile is null) return;

		var document = new Document
		{
			Description = _titreDocument,
			Nom = _currentFile.Name,
			StatutCode = StatutDocument.EnCours.Code,
			TypeCode = TypeDocument.Code,
			DemandeId = DemandeId
		};

		document.Id = await DocumentRepository.Create(document, _currentFile, State.HubConnection.ConnectionId);

		Documents.Add(document);

		_currentFile = null;
		_titreDocument = string.Empty;

		StateHasChanged();

		Console.WriteLine($"Sender: {HubConnection.ConnectionId}");
		
		await State.HubConnection.InvokeAsync("Notify", DemandeId, HubConnection.ConnectionId);
	}

	private bool NoFileSelected() => _currentFile == null;
	private string GetFileLabel() => _currentFile?.Name ?? "Aucun fichier séléctionné";
	private string GetColorClass() => TypeDocument == TypeDocument.Projet ? "blue-grey lighten-5" : string.Empty;
}