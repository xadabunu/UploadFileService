@inject IDocumentRepository repository

@if (Documents.Any())
{
	<MudText Typo="@Typo.h6">@Documents.Count() Document@(Documents.Count() == 1 ? "" : "s"):</MudText>
}
<MudList>
	@foreach (var document in Documents)
	{
		<EpListeDocumentsItem Document="@document" OnDelete="@OnDocumentDeleted"/>
	}
</MudList>

@code {
	public IEnumerable<Document> Documents { get; set; } = [];
	[CascadingParameter] public Demande Demande { get; set; }
	[Parameter] public TypeDocument TypeDocument { get; set; }

	protected override async Task OnInitializedAsync()
	{
		Documents = await repository.GetDocuments(Demande.Id, TypeDocument.Code);
	}

	private async void OnDocumentDeleted()
	{
		Documents = await repository.GetDocuments(Demande.Id, TypeDocument.Code);
		StateHasChanged();
	}
}