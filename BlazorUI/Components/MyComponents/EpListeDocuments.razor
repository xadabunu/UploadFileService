@using BlazorUI.Application.Model
@inject IDocumentRepository repository

@if (Documents.Any())
{
	<MudText Typo="@Typo.h6">@Documents.Count() Document@(Documents.Count() == 1 ? "" : "s"):</MudText>
	<MudList>
		@foreach (var document in Documents)
		{
			<EpListeDocumentsItem
				@key="document.Id"
				Document="@document"
				OnDelete="@OnDocumentDeleted"/>
		}
	</MudList>
}

@code {
	[Parameter] public List<Document> Documents { get; set; } = [];
	[Parameter] public TypeDocument TypeDocument { get; set; } = default!;
	[Parameter] public EventCallback<List<Document>> DocumentsChanged { get; set; }

	[CascadingParameter(Name = "DemandeId")]
	public int DemandeId { get; set; }

	private ScanResultMessage? _message;

	[CascadingParameter(Name = "Message")]
	public ScanResultMessage? Message
	{
		get => _message;
		set
		{
			if (value == null) return;

			_message = value;
			OnNewMessage();
		}
	}

	protected override async Task OnInitializedAsync()
	{
		Documents = (await repository.GetDocuments(DemandeId, TypeDocument.Code)).ToList();
	}

	private void OnNewMessage()
	{
		if (TypeDocument.Code != Message?.DocumentType) return;

		var doc = Documents.SingleOrDefault(d => d.Id == Message.DocumentId);

		if (doc is null) return;

		doc.StatutCode = Message.ResultCode;

		StateHasChanged();
	}

	private async void OnDocumentDeleted()
	{
		// Documents.Remove();
		// Documents = (await repository.GetDocuments(DemandeId, TypeDocument.Code)).ToList();
		// StateHasChanged();
		await DocumentsChanged.InvokeAsync();
	}

}