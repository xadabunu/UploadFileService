@using BlazorUI.Application.Model
@inject IDocumentRepository repository

@if (Documents.Any())
{
	<MudText Typo="@Typo.h6">@Documents.Count() Document@(Documents.Count() == 1 ? "" : "s"):</MudText>
	<MudList>
		@foreach (var document in Documents)
		{
			<EpListeDocumentsItem
				@key="document.Id"
				Document="@document"
				OnDelete="@(document =>OnDocumentDeleted(document))"/>
		}
	</MudList>
}

@code {
	[Parameter] public List<Document> Documents { get; set; } = [];
	[Parameter] public TypeDocument TypeDocument { get; set; } = default!;

	[CascadingParameter] public DocumentsPageState State { get; set; }

	protected override async Task OnInitializedAsync()
	{
		if (State.HubConnection is { State: HubConnectionState.Connected })
		{
			State.HubConnection.On<ScanResultMessage>(
				"GetScanResult", OnNewMessage);
		}
	}

	private void OnNewMessage(ScanResultMessage message)
	{
		if (TypeDocument.Code != message.DocumentType) return;

		var doc = Documents.SingleOrDefault(d => d.Id == message.DocumentId);

		if (doc is null) return;

		doc.StatutCode = message.ResultCode;

		InvokeAsync(StateHasChanged);
	}

	private async void OnDocumentDeleted(Document document)
	{
		await repository.Delete(document.Id);
		Documents.Remove(document);
		await InvokeAsync(StateHasChanged);
		await State.HubConnection.InvokeAsync(
			"Notify",
			State.DemandeId,
			State.HubConnection.ConnectionId);
	}

}