@inject IDocumentService service

@if (Documents.Any())
{
	<MudText Typo="@Typo.h6">@Documents.Count() Document@(Documents.Count() == 1 ? "" : "s"):</MudText>
	<MudList>
		@foreach (var document in Documents)
		{
			<EpListeDocumentsItem
				@key="document.Id"
				Document="@document"/>
		}
	</MudList>
}

@code {
	private List<Document> Documents { get; set; } = [];
	[Parameter] public TypeDocument TypeDocument { get; set; } = default!;

	[CascadingParameter] public EpState State { get; set; }

	protected override async Task OnInitializedAsync()
	{
		Documents = (await service.GetDocumentsByType(State.DemandeId, TypeDocument.Code)).ToList();

		State.HubConnection.On<int>(DocumentNotification.Deleted, async deletedId =>
		{
			Documents.RemoveAll(doc => doc.Id == deletedId);
			await InvokeAsync(StateHasChanged);
		});

		State.HubConnection.On<Document>(DocumentNotification.Added, async document =>
		{
			Documents.Add(document);
			await InvokeAsync(StateHasChanged);
		});
	}

}