@page "/file/{id:int}"
@inject IConfiguration config
@inject IHttpClientFactory Factory
@inject NavigationManager NavManager

@using Microsoft.AspNetCore.SignalR.Client
@using BlazorUI.Application.Model
@implements IAsyncDisposable

<PageTitle>Les fichiers</PageTitle>

<MudText Typo="Typo.h4" Class="my-6">Téléchargez vos fichiers ici</MudText>

<MudExpansionPanels MultiExpansion="true">

	@if (IsLoading)
	{
		<MudProgressCircular Indeterminate="true"/>
	}
	else
	{
		<CascadingValue Value="@Id" Name="DemandeId">
			<CascadingValue Value="@Message" Name="Message">
				<CascadingValue Value="@HubConnection.ConnectionId" Name="ConnectionId">

					<EpExpansionPanel
						TypeDocument="@TypeDocument.Projet"/>

					<EpExpansionPanel
						TypeDocument="TypeDocument.AutreDocument"/>

				</CascadingValue>
			</CascadingValue>
		</CascadingValue>
	}

</MudExpansionPanels>

@code
{
	[Parameter] public int Id { get; set; }
	private Demande? Demande { get; set; }
	private HubConnection? HubConnection { get; set; }

	private ScanResultMessage Message { get; set; }

	private bool IsLoading = true;

	protected override async Task OnInitializedAsync()
	{
		var client = Factory.CreateClient("API");

		var result = await client.GetAsync($"/demande/{Id}");

		if (!result.IsSuccessStatusCode)
		{
			NavManager.NavigateTo("/");
		}
		else
		{
			await Task.Delay(750);

			var demande = await result.Content.ReadFromJsonAsync<Demande>();
			Demande = demande;

			HubConnection = await SetupHub();
		}

		IsLoading = false;
	}

	public async ValueTask DisposeAsync()
	{
		if (HubConnection != null)
		{
			await HubConnection.DisposeAsync();
		}
	}

	private async Task<HubConnection> SetupHub()
	{
		HubConnection = new HubConnectionBuilder()
			.WithUrl("http://localhost:5057/huburl")
			.Build();

		await HubConnection.StartAsync();

		if (HubConnection is { State: HubConnectionState.Connected })
		{
			await HubConnection.InvokeAsync("JoinGroup", Demande.Id);
		}

		HubConnection.On<ScanResultMessage>("GetScanResult",
			async (newMessage) =>
			{
				Message = newMessage;
				await InvokeAsync(StateHasChanged);
			});

		return HubConnection;
	}
}